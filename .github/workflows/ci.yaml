name: CI

on:
  push:
    branches:
      - 'master'
  pull_request:

jobs:
  test-rust:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [stable, nightly-2022-12-11]
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
    - name: Show rust version
      run: rustc --version
    - uses: Homebrew/actions/setup-homebrew@master
    - name: Install protobuf
      run: brew install protobuf
    - name: Test and check (stable)
      run: |
        make COUNT_ALLOCATIONS=1 check
      if: matrix.rust == 'stable'
    - name: Test and check (nightly)
      run: |
        rustup component add clippy rustfmt --toolchain nightly-2022-12-11
        make NIGHTLY=1 check
      if: matrix.rust == 'nightly-2022-12-11'
      continue-on-error: true

  test-rust-32-bits:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
      with:
        targets: i686-unknown-linux-musl
    - run: rustc --version
    - run: cargo test --target i686-unknown-linux-musl
      working-directory: crates/core

  test-rust-wasi:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-wasi
    - run: rustc --version
    - uses: Homebrew/actions/setup-homebrew@master
    - run: brew install wasmtime
    - run: cargo install cargo-wasi
    - run: cargo wasi test -- --nocapture
      working-directory: crates/core

  test-c-and-cxx-bindings:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - if: ${{ matrix.os == 'ubuntu-latest' }}
      uses: Homebrew/actions/setup-homebrew@master
    - if: ${{ matrix.os == 'ubuntu-latest' }}
      run: sudo apt-get update && sudo apt-get -y install libc6-dbg && brew install valgrind
    - run: make test-c-and-cxx-bindings

  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.11']
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Test with Python ${{ matrix.python-version }}
      run: make test-python

  test-wasm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ '14.x', '19.x' ]
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        registry-url: 'https://registry.npmjs.org'
    - uses: Homebrew/actions/setup-homebrew@master
    - name: Install wasm-opt
      run: brew update && brew install binaryen
    - name: Install wasm-bindgen
      run: make install-wasm-bindgen
    - name: Test with Node ${{ matrix.node-version }}
      run: make node-package

  benchmark:
    strategy:
      matrix:
        tested-commit: [new, old]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout current commit
      uses: actions/checkout@v3
      with:
        fetch-depth: 2
      if: matrix.tested-commit == 'new' || github.event_name != 'pull_request'
    - name: Checkout base branch (${{ github.base_ref }} of pull request
      uses: actions/checkout@v3
      with:
        ref: ${{ github.base_ref }}
      if: matrix.tested-commit == 'old' && github.event_name == 'pull_request'
    - name: Checkout previous commit
      run: git checkout HEAD~1
      if: matrix.tested-commit == 'old' && github.ref == 'refs/heads/master'
    - uses: dtolnay/rust-toolchain@stable
    - uses: Homebrew/actions/setup-homebrew@master
    - run: brew install valgrind
    - name: Run benchmark on ${{ matrix.tested-commit }} commit
      run: ./run-iai-benchmark.py > ${{ matrix.tested-commit }}-baseline.json
      working-directory: crates/core
    - name: Upload benchmark on current commit
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.tested-commit }}-benchmark
        path: crates/core/${{ matrix.tested-commit }}-baseline.json

  compare-benchmarks:
    needs: [benchmark]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Download new benchmark
      uses: actions/download-artifact@v3
      with:
        name: new-benchmark
    - name: Download old benchmark
      uses: actions/download-artifact@v3
      with:
        name: old-benchmark
    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Format commit comment
      id: get-comment-body
      run: |
        body=$(./.github/workflows/compare-iai.py old-baseline.json new-baseline.json)
        delimiter="$(openssl rand -hex 8)"
        echo "body<<$delimiter" >> $GITHUB_OUTPUT
        echo "$body" >> $GITHUB_OUTPUT
        echo "$delimiter" >> $GITHUB_OUTPUT
    - name: Post commit comment
      uses: peter-evans/commit-comment@v2
      with:
        body: ${{ steps.get-comment-body.outputs.body }}

  fuzz-afl:
    runs-on: ubuntu-latest
    # Allow failures as LLVM is not always available for installation:
    continue-on-error: true
    steps:
    - name: Check out source code
      uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - name: Install current LLVM
      run: sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
    - name: Fuzz with AFL
      run: LLVM_CONFIG=llvm-config-12 AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1 AFL_BENCH_UNTIL_CRASH=1 make fuzz-afl
    - name: Upload crashes found by fuzzing
      uses: actions/upload-artifact@v3
      with:
        path: ./crates/fuzzing-afl/target/fuzz-findings/default/crashes
        name: fuzzing-crashes-afl

  fuzz-libfuzzer:
    runs-on: ubuntu-latest
    steps:
    - name: Check out source code
      uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: nightly-2022-12-11
    - name: Fuzz with libfuzzer
      run: timeout 1800s make fuzz-libfuzzer
      continue-on-error: true
    - name: Upload crashes found by fuzzing
      uses: actions/upload-artifact@v3
      with:
        path: crates/fuzzing-libfuzzer/fuzz/artifacts/fuzz_target/
        name: fuzzing-crashes-libfuzzer

  fuzz-honggfuzz:
    runs-on: ubuntu-latest
    steps:
    - name: Check out source code
      uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - name: Install honggfuzz dependencies
      run: sudo apt-get update && sudo apt-get -y install build-essential binutils-dev libunwind-dev libblocksruntime-dev liblzma-dev
    - name: Fuzz with honggfuzz
      run: timeout 1800s make fuzz-hfuzz
      continue-on-error: true
      env:
        HFUZZ_RUN_ARGS: "-t 10 --exit_upon_crash"
    - name: Upload crashes found by fuzzing
      uses: actions/upload-artifact@v3
      with:
        path: crates/fuzzing-hfuzz/hfuzz_workspace/advent-of-code-fuzzing-hfuzz/*.fuzz
        name: fuzzing-crashes-honggfuzz

  coverage:
    runs-on: ubuntu-latest
    container:
      image: xd009642/tarpaulin
      options: --security-opt seccomp=unconfined
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: nightly-2022-12-11
    - name: Generate code coverage
      # What about -all-features and --workspace?
      run: cargo +nightly-2022-12-11 tarpaulin --verbose --timeout 720 --out Xml
      working-directory: crates/core
    - name: Upload to codecov.io
      uses: codecov/codecov-action@v3
      with:
        directory: crates/core

  actionlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download actionlint
        id: get_actionlint
        run: bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
      - name: Check workflow files
        run: ${{ steps.get_actionlint.outputs.executable }} -color -ignore shellcheck

  check-js:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - name: Check js
        run: npm install && npm run check
        working-directory: crates/wasm

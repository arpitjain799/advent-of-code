name: Deploys

on: push

jobs:
  build-python-wheels:
    env:
      CIBW_SKIP: "cp27-* cp34-* cp35-* cp36-* pp* *i686 *win32"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: hecrj/setup-rust-action@v1
      - uses: actions/setup-python@v2
        name: Setup python
        with:
          python-version: '3.8'
      - name: Install bump2version
        run: pip install bump2version
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel setuptools_rust
      - name: Bump version
        run: bump2version patch
      - name: Build wheels on Linux and macOS
        if: runner.os != 'Windows'
        working-directory: crates/python/
        run: |
          # Fix ../core being outside of the project built by cibuildwheel:
          perl -p -i -e 's/..\/core/core/' Cargo.toml && mv ../core .
          export CIBW_BEFORE_BUILD='pip install setuptools-rust && curl -o /tmp/rustup.sh https://sh.rustup.rs && sh /tmp/rustup.sh -y'
          export CIBW_ENVIRONMENT='PATH=$HOME/.cargo/bin:$PATH'
          python -m cibuildwheel --output-dir wheelhouse
      - name: Build wheels on Windows
        if: runner.os == 'Windows'
        working-directory: crates/python/
        env:
          CIBW_BEFORE_BUILD: "python -m pip install setuptools_rust"
        run: |
          # Fix ../core being outside of the project built by cibuildwheel:
          perl -p -i -e 's/..\/core/core/' Cargo.toml
          move ..\core core
          python -m cibuildwheel --output-dir wheelhouse
      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./crates/python/wheelhouse/*.whl

  release-core-docker-image:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
    - name: Install bump2version
      run: pip install bump2version
    - name: Login to docker hub
      run: docker login -u fredrikfornwall -p $DOCKER_ACCESS_TOKEN
      env:
        DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
    - name: Build and push docker image
      env:
        DOCKER_IMAGE_NAME: fredrikfornwall/advent-of-code
      run: |
        NEW_VERSION=`bump2version patch --dry-run --list | grep new_version | cut -d = -f 2`
        IMAGE=${DOCKER_IMAGE_NAME}:${NEW_VERSION}
        echo "Version: $NEW_VERSION - about to build and push ${IMAGE}"
        docker build --tag ${IMAGE} crates/core
        docker tag ${IMAGE} ${DOCKER_IMAGE_NAME}:latest
        docker push ${DOCKER_IMAGE_NAME}

  publish-and-deploy-http-server:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
    - name: Install bump2version
      run: pip install bump2version
    - name: Login to docker hub
      run: docker login -u fredrikfornwall -p $DOCKER_ACCESS_TOKEN
      env:
        DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
    - name: Build and push docker image
      env:
        DOCKER_IMAGE_NAME: fredrikfornwall/advent-of-code-http-server
      run: |
        VERSION=`bump2version patch --dry-run --list | grep current_version | cut -d = -f 2`
        IMAGE=${DOCKER_IMAGE_NAME}:${VERSION}
        echo "Version: $VERSION - about to build and push ${IMAGE}"
        cd crates/http-server
        cp -Rf ../core core
        perl -p -i -e 's/\.\.\/core/core/' Cargo.toml
        docker build --tag ${IMAGE} .
        docker tag ${IMAGE} ${DOCKER_IMAGE_NAME}:latest
        docker push ${DOCKER_IMAGE_NAME}
    - name: Deploy to Fly
      uses: superfly/flyctl-actions@master
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        FLY_PROJECT_PATH: crates/http-server
      with:
        args: "deploy"

  publish-and-deploy-grpc-server:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
    - name: Install bump2version
      run: pip install bump2version
    - name: Login to docker hub
      run: docker login -u fredrikfornwall -p $DOCKER_ACCESS_TOKEN
      env:
        DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
    - name: Build and push docker image
      env:
        DOCKER_IMAGE_NAME: fredrikfornwall/advent-of-code-grpc-server
      run: |
        VERSION=`bump2version patch --dry-run --list | grep current_version | cut -d = -f 2`
        bump2version patch
        IMAGE=${DOCKER_IMAGE_NAME}:${VERSION}
        echo "Version: $NEW_VERSION - about to build and push ${IMAGE}"
        cd crates/grpc-server
        cp -Rf ../core core
        perl -p -i -e 's/\.\.\/core/core/' Cargo.toml
        docker build --tag ${IMAGE} .
        docker tag ${IMAGE} ${DOCKER_IMAGE_NAME}:latest
        docker push ${DOCKER_IMAGE_NAME}
    - name: Deploy to Fly
      uses: superfly/flyctl-actions@master
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        FLY_PROJECT_PATH: crates/grpc-server
      with:
        args: "deploy"

  deploy-cloudflare-worker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - name: Deploy to Cloudflare
      env:
        CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        make install-wasm-pack
        sudo npm install -g @cloudflare/wrangler
        cd crates/wasm
        wrangler publish

  release-npm-packages:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
        registry-url: 'https://registry.npmjs.org'
    - name: Publish npm packages
      run: |
        make install-wasm-pack
        . ${HOME}/.cargo/env
        make npm-publish
      env:
        # It needs to be named 'NODE_AUTH_TOKEN' as it's referenced
        # by the .npmrc created by setup-node:
        NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

  release-rust-crate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - name: Login to cargo
      run: cargo login ${CRATES_API_TOKEN}
      env:
        CRATES_API_TOKEN: ${{secrets.CRATES_API_TOKEN}}
    - name: Publish crate
      run: cd crates/core && cargo publish --allow-dirty

  release-pypi-package:
    runs-on: ubuntu-latest
    steps:
    - name: Download built wheels
      uses: actions/download-artifact@v2
      with:
        name: wheels
        path: dist
    - name: List files
      run: ls -lha dist
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  benchmark-current:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - name: Install critcmp
      run: cargo install critcmp
    - name: Run benchmark on current commit
      run: |
        cd crates/core
        cargo bench -- --save-baseline new-baseline
        critcmp --export new-baseline > new-baseline.json
    - name: Upload benchmark on current commit
      uses: actions/upload-artifact@v2
      with:
        name: new-benchmark
        path: crates/core/new-baseline.json

  benchmark-previous:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
    - uses: hecrj/setup-rust-action@v1
    - name: Install critcmp
      run: cargo install critcmp
    - name: Checkout previous commit
      run: git checkout HEAD~1
    - name: Run benchmark on previous commit
      run: |
        cd crates/core
        cargo bench -- --save-baseline old-baseline
        critcmp --export old-baseline > old-baseline.json
    - name: Upload benchmark on previous commit
      uses: actions/upload-artifact@v2
      with:
        name: old-benchmark
        path: crates/core/old-baseline.json

  compare-benchmarks:
    needs: [benchmark-current, benchmark-previous]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Download new benchmark
      uses: actions/download-artifact@v2
      with:
        name: new-benchmark
    - name: Download old benchmark
      uses: actions/download-artifact@v2
      with:
        name: old-benchmark
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - uses: hecrj/setup-rust-action@v1
    - name: Install critcmp
      run: cargo install critcmp
    - name: Compare benchmarks on current and previous commit
      run: |
        critcmp old-baseline.json new-baseline.json > benchcmp.txt
        cat benchcmp.txt
    - name: Format commit comment
      id: get-comment-body
      run: |
        body=$(./.github/workflows/benchcmp-to-diff.py benchcmp.txt)
        body="${body//'%'/'%25'}"
        body="${body//$'\n'/'%0A'}"
        body="${body//$'\r'/'%0D'}"
        echo ::set-output name=body::$body
    - name: Post commit comment
      uses: peter-evans/commit-comment@v1
      with:
        body: ${{ steps.get-comment-body.outputs.body }}
    - run: ls -lha .github/workflows/

  deploy-to-netlify:
    needs: benchmark-current
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly-2020-11-21
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
        registry-url: 'https://registry.npmjs.org'
    - name: Install wasm-pack and nightly
      run: |
        make install-nightly
        make install-wasm-pack
    - name: Install the Netlify CLI
      run: npm install netlify-cli -g
    - name: Download new benchmark
      uses: actions/download-artifact@v2
      with:
        name: new-benchmark
        path: crates/wasm/site
    - name: Deploy to Netlify
      run: make netlify
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_API_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
